{"version":3,"sources":["types/FilterTypes.ts","api.tsx","types/ErrorMessages.ts","components/Footer/TodosFilter.tsx","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","components/ErrorMessage/ErrorMessage.tsx","components/NewTodoForm/NewTodoFrom.tsx","App.tsx","index.tsx"],"names":["Status","LinkHref","BASE_URL","Errors","filterLinks","name","All","way","Active","Completed","TodosFilter","className","map","link","to","isActive","classNames","selected","TodoItem","todo","handleDeleteTodo","handleUpdateTodo","id","completed","title","useState","todoEditing","setTodoEditing","newTitle","setNewTitle","inputField","useRef","useEffect","current","focus","handleSaveOrDeleteTitle","trim","editing","type","checked","onClick","htmlFor","onDoubleClick","aria-label","data-cy","ref","value","onChange","e","target","onBlur","onKeyUp","keyCode","TodoList","items","TransitionGroup","item","CSSTransition","timeout","ErrorMessage","errorMessage","isError","hidden","NewTodoForm","setTodos","setIsError","setErrorMessage","showAndDeleteError","query","setQuery","onSubmit","data","preventDefault","userId","fetch","method","headers","body","JSON","stringify","then","response","ok","Error","json","res","prevTodos","catch","Add","finally","placeholder","App","todos","None","userName","setUserName","timer","setTimeout","todoId","deleteTodos","filter","Delete","updateTodos","Update","filterTodos","filterBy","length","completedTodos","useMemo","activeTodos","Get","clearTimeout","path","index","element","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.8f1f7aec.chunk.js","sourcesContent":["/* eslint-disable no-shadow */\nexport enum Status {\n  All = 'All',\n  Active = 'Active',\n  Completed = 'Completed',\n}\n\nexport enum LinkHref {\n  All = '',\n  Active = 'active',\n  Completed = 'completed',\n}\n","const BASE_URL = 'https://mate.academy/students-api';\nconst userId = 11065;\n\nexport const getUser = () => {\n  return fetch(`${BASE_URL}/users/${userId}`, { method: 'GET' })\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n};\n\nexport const getTodos = () => {\n  return fetch(`${BASE_URL}/todos?userId=${userId}`, { method: 'GET' })\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n};\n\nexport const updateTodos = (\n  todoId: number,\n  data: { [key: string]: string | boolean },\n) => {\n  return fetch(`${BASE_URL}/todos/${todoId}`, {\n    method: 'PATCH',\n    headers: {\n      'Content-Type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(data),\n  })\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n};\n\nexport const createTodos = (data: {\n  [key: string]: string | boolean | number,\n}) => {\n  return fetch(`${BASE_URL}/todos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(data),\n  })\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n};\n\nexport const deleteTodos = (todoId: number) => {\n  return fetch(`${BASE_URL}/todos/${todoId}`, { method: 'DELETE' })\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n};\n","/* eslint-disable no-shadow */\nexport enum Errors {\n  None = '',\n  Add = 'Unable to add todo',\n  Delete = 'Unable to delete todo',\n  Update = 'Unable to update todo',\n  Get = 'Unable to get todos',\n}\n","/* eslint-disable react/react-in-jsx-scope */\nimport classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\nimport { Status, LinkHref } from '../../types/FilterTypes';\n\nconst filterLinks = [\n  { name: Status.All, way: LinkHref.All },\n  { name: Status.Active, way: LinkHref.Active },\n  { name: Status.Completed, way: LinkHref.Completed },\n];\n\nexport const TodosFilter = () => {\n  return (\n    <ul className=\"filters\">\n      {filterLinks.map(link => {\n        const { name, way } = link;\n\n        return (\n          <li\n            key={name}\n          >\n            <NavLink\n              to={`../${way}`}\n              className={({ isActive }) => classNames({ selected: isActive })}\n            >\n              {name}\n            </NavLink>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n","/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React, { useState, useRef, useEffect } from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype TodoItemProps = {\n  todo: Todo;\n  handleDeleteTodo: (todoId: number) => void,\n  handleUpdateTodo: (\n    todoId: number, data: { [key: string]: string | boolean }\n  ) => void,\n};\n\nexport const TodoItem: React.FC<TodoItemProps> = ({\n  todo,\n  handleDeleteTodo,\n  handleUpdateTodo,\n}) => {\n  const { id, completed, title } = todo;\n  const [todoEditing, setTodoEditing] = useState(0);\n  const [newTitle, setNewTitle] = useState(title);\n  const inputField = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (todoEditing === id && inputField.current) {\n      inputField.current.focus();\n    }\n  }, [todoEditing]);\n\n  const handleNewTitle = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setNewTitle(e.target.value);\n  };\n\n  const handleSaveOrDeleteTitle = () => {\n    if (todoEditing !== 0 && newTitle.trim()) {\n      handleUpdateTodo(todoEditing, { title: newTitle });\n\n      return setTodoEditing(0);\n    }\n\n    return handleDeleteTodo(todoEditing);\n  };\n\n  const handleChangeTitle = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.keyCode === 13) {\n      handleSaveOrDeleteTitle();\n    }\n\n    if (e.keyCode === 27) {\n      setTodoEditing(0);\n    }\n  };\n\n  return (\n    <li\n      className={classNames({\n        completed,\n        editing: id === todoEditing,\n      })}\n      key={id}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          id=\"toggle-view\"\n          checked={completed}\n          onClick={() => handleUpdateTodo(id, { completed: !completed })}\n        />\n        <label\n          htmlFor={todoEditing === id ? 'toggle-view' : ''}\n          onDoubleClick={() => setTodoEditing(id)}\n        >\n          {title}\n        </label>\n        <button\n          aria-label=\"deleteTodo\"\n          type=\"button\"\n          className=\"destroy\"\n          data-cy=\"deleteTodo\"\n          onClick={() => handleDeleteTodo(id)}\n        />\n      </div>\n      <input\n        type=\"text\"\n        ref={inputField}\n        className=\"edit\"\n        value={newTitle}\n        onChange={handleNewTitle}\n        onBlur={handleSaveOrDeleteTitle}\n        onKeyUp={handleChangeTitle}\n      />\n    </li>\n  );\n};\n","import React from 'react';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\nimport { Todo } from '../../types/Todo';\nimport { TodoItem } from '../TodoItem';\n\ntype TodoListProps = {\n  items: Todo[],\n  handleDeleteTodo: (todoId: number) => void,\n  handleUpdateTodo: (\n    todoId: number, data: { [key: string]: string | boolean }\n  ) => void,\n};\n\nexport const TodoList: React.FC<TodoListProps> = ({\n  items,\n  handleDeleteTodo,\n  handleUpdateTodo,\n}) => {\n  return (\n    <ul className=\"todo-list\" data-cy=\"todoList\">\n      <TransitionGroup>\n        {items.map(item => (\n          <CSSTransition\n            key={item.id}\n            timeout={300}\n            classNames=\"item\"\n          >\n            <TodoItem\n              key={item.id}\n              todo={item}\n              handleDeleteTodo={handleDeleteTodo}\n              handleUpdateTodo={handleUpdateTodo}\n            />\n          </CSSTransition>\n        ))}\n      </TransitionGroup>\n    </ul>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Errors } from '../../types/ErrorMessages';\n\ntype ErrorMessageProps = {\n  errorMessage: Errors,\n  isError: boolean,\n};\n\nexport const ErrorMessage: React.FC<ErrorMessageProps> = ({\n  errorMessage,\n  isError,\n}) => {\n  return (\n    <div\n      className={classNames('error-message', {\n        hidden: !isError,\n      })}\n    >\n      {errorMessage}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { createTodos } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { Errors } from '../../types/ErrorMessages';\n\nconst userId = 11065;\n\ntype NewTodoFormType = {\n  setTodos: React.Dispatch<React.SetStateAction<Todo[]>>,\n  setIsError: React.Dispatch<React.SetStateAction<boolean>>,\n  setErrorMessage: React.Dispatch<React.SetStateAction<Errors>>,\n  showAndDeleteError: (timer?: number) => NodeJS.Timeout,\n};\n\nexport const NewTodoForm: React.FC<NewTodoFormType> = ({\n  setTodos,\n  setIsError,\n  setErrorMessage,\n  showAndDeleteError,\n}) => {\n  const [query, setQuery] = useState('');\n\n  const handleQueryChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(e.target.value);\n  };\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (query.trim()) {\n      createTodos({\n        title: query,\n        userId,\n        completed: false,\n      })\n        .then((res) => {\n          setTodos(prevTodos => [...prevTodos, res]);\n        })\n        .catch(() => {\n          setIsError(true);\n          setErrorMessage(Errors.Add);\n        })\n        .finally(() => showAndDeleteError());\n\n      setQuery('');\n    }\n  };\n\n  return (\n    <form\n      onSubmit={handleSubmit}\n    >\n      <input\n        type=\"text\"\n        data-cy=\"createTodo\"\n        value={query}\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n        onChange={handleQueryChange}\n      />\n    </form>\n  );\n};\n","/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { Navigate, Route, Routes } from 'react-router-dom';\nimport {\n  deleteTodos,\n  getTodos,\n  getUser,\n  updateTodos,\n} from './api';\nimport { Todo } from './types/Todo';\nimport { TodosFilter } from './components/Footer';\nimport { Status } from './types/FilterTypes';\nimport { TodoList } from './components/TodoList';\nimport { Errors } from './types/ErrorMessages';\nimport { ErrorMessage } from './components/ErrorMessage';\nimport { NewTodoForm } from './components/NewTodoForm';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [isError, setIsError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState<Errors>(Errors.None);\n  const [userName, setUserName] = useState('');\n\n  const showAndDeleteError = (timer = 3000) => {\n    return setTimeout(() => {\n      setIsError(false);\n      setErrorMessage(Errors.None);\n    }, timer);\n  };\n\n  const handleDeleteTodo = (todoId: number) => {\n    deleteTodos(todoId)\n      .then(() => {\n        setTodos(prevTodos => [...prevTodos\n          .filter(todo => todo.id !== todoId)]);\n      })\n      .catch(() => {\n        setIsError(true);\n        setErrorMessage(Errors.Delete);\n      })\n      .finally(() => showAndDeleteError());\n  };\n\n  const handleUpdateTodo = (\n    todoId: number,\n    data: { [key: string]: string | boolean },\n  ) => {\n    updateTodos(todoId, data)\n      .then((res) => {\n        setTodos(prevTodos => [\n          ...prevTodos.map(todo => {\n            return todo.id === todoId ? res : todo;\n          }),\n        ]);\n      })\n      .catch(() => {\n        setIsError(true);\n        setErrorMessage(Errors.Update);\n      })\n      .finally(() => showAndDeleteError());\n  };\n\n  const filterTodos = (filterBy: Status) => {\n    if (todos.length > 0) {\n      switch (filterBy) {\n        case Status.Active:\n          return todos.filter(todo => !todo.completed);\n\n        case Status.Completed:\n          return todos.filter(todo => todo.completed);\n\n        default:\n          return todos;\n      }\n    }\n\n    return todos;\n  };\n\n  const completedTodos = useMemo(() => filterTodos(Status.Completed), [todos]);\n\n  const activeTodos = useMemo(() => filterTodos(Status.Active), [todos]);\n\n  useEffect(() => {\n    getUser().then(res => setUserName(res.name));\n\n    getTodos()\n      .then(setTodos)\n      .catch(() => {\n        setIsError(true);\n        setErrorMessage(Errors.Get);\n      })\n      .finally(() => {\n        showAndDeleteError();\n      });\n\n    return clearTimeout(showAndDeleteError());\n  }, []);\n\n  const handleDeleteAllCompletedTodos = () => {\n    completedTodos.map(todo => handleDeleteTodo(todo.id));\n  };\n\n  const toggleAll = () => {\n    const list = activeTodos.length ? activeTodos : todos;\n\n    return list\n      .map(todo => handleUpdateTodo(todo.id, { completed: !todo.completed }));\n  };\n\n  return (\n    <>\n      <div className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <p className=\"todoapp-username\">{userName}</p>\n\n          <NewTodoForm\n            setTodos={setTodos}\n            setIsError={setIsError}\n            setErrorMessage={setErrorMessage}\n            showAndDeleteError={showAndDeleteError}\n          />\n        </header>\n\n        <section className=\"main\">\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            checked={todos.length > 0 && completedTodos.length === todos.length}\n            data-cy=\"toggleAll\"\n            onClick={toggleAll}\n          />\n          <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n          {todos.length > 0 && (\n            <Routes>\n              <Route path=\"/\">\n                <Route\n                  index\n                  element={(\n                    <TodoList\n                      items={todos}\n                      handleDeleteTodo={handleDeleteTodo}\n                      handleUpdateTodo={handleUpdateTodo}\n                    />\n                  )}\n                />\n                <Route\n                  path=\"active\"\n                  element={(\n                    <TodoList\n                      items={activeTodos}\n                      handleDeleteTodo={handleDeleteTodo}\n                      handleUpdateTodo={handleUpdateTodo}\n                    />\n                  )}\n                />\n                <Route\n                  path=\"completed\"\n                  element={(\n                    <TodoList\n                      items={completedTodos}\n                      handleDeleteTodo={handleDeleteTodo}\n                      handleUpdateTodo={handleUpdateTodo}\n                    />\n                  )}\n                />\n              </Route>\n\n              <Route\n                path=\"*\"\n                element={<Navigate to=\"/\" />}\n              />\n            </Routes>\n          )}\n        </section>\n\n        {todos.length > 0 && (\n          <footer className=\"footer\">\n            <span className=\"todo-count\" data-cy=\"todosCounter\">\n              {activeTodos.length === 1 ? '1 item left' : `${activeTodos.length} items left`}\n            </span>\n\n            <TodosFilter />\n\n            <button\n              type=\"button\"\n              className=\"clear-completed\"\n              hidden={completedTodos.length === 0}\n              onClick={handleDeleteAllCompletedTodos}\n            >\n              Clear completed\n            </button>\n          </footer>\n        )}\n      </div>\n\n      <ErrorMessage\n        errorMessage={errorMessage}\n        isError={isError}\n      />\n    </>\n  );\n};\n","/* eslint-disable react/react-in-jsx-scope */\nimport { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}